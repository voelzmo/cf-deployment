#!/bin/bash

set -euf -o pipefail

CF_DEPLOYMENT_TRACE=${CF_DEPLOYMENT_TRACE:-}
if [ ! -z "${CF_DEPLOYMENT_TRACE}" ]; then
  set -x
fi

infrastructure="${1:?}"
if [ "${infrastructure}" != "aws" ] && \
    [ "${infrastructure}" != "openstack" ] && \
    [ "${infrastructure}" != "bosh-lite" ] && \
    [ "${infrastructure}" != "vsphere" ] ; then
  echo "Usage: prepare-deployments <aws|bosh-lite|openstack|vsphere> <path_to_config_file>" 1>&2
  exit 1
fi

mydir="$(cd "$(dirname "$0")" && pwd)"
cf_deployment_dir="$(cd "${mydir}/.." && pwd)"

PATH_TO_CONFIG_FILE="${2:?Path to config file not provided}"

DEPLOYMENTS_DIR=$( jq -r 'if .["deployments-dir"] then .["deployments-dir"] else "" end' "${PATH_TO_CONFIG_FILE}")
DEPLOYMENTS_DIR="${DEPLOYMENTS_DIR:-${cf_deployment_dir}/outputs/manifests}"

if [ ! -d "${DEPLOYMENTS_DIR}" ]; then
  echo "deployments-dir must be a directory" 1>&2
  exit 1
fi

determine_version() {
  case "${1}" in
    "integration-latest")
      if [ "${2}" == "cf" ]; then
        echo "create"
        exit 0
      fi

      jq ".releases[] | select(.name == \"${2}\") | .version" blessed_versions.json
      ;;

    "director-latest")
      echo "latest"
      ;;

    *.tgz)
      tar -x -O -f "${1}" ./release.MF |  grep -E '^version:' | awk '{print $2};'
      ;;

    *)
      echo "create"
      ;;
  esac
}

determine_stemcell_name() {
  case "${1}" in
    *.tgz)
      tar -x -O -f "${1}" ./stemcell.MF |  grep -E '^name:' | awk '{print $2};'
      ;;

    *)
      jq ".stemcells[\"${2}\"].type" blessed_versions.json
      ;;
  esac
}

determine_stemcell_version() {
  case "${1}" in
    *.tgz)
      tar -x -O -f "${1}" ./stemcell.MF |  grep -E '^version:' | awk '{print $2};'
      ;;

    "integration-latest")
      jq ".stemcells[\"${2}\"].version" blessed_versions.json
      ;;

    "director-latest")
      echo "latest"
      ;;
  esac
}

determine_stemcell_sha1() {
  case "${1}" in
    "director-latest")
      echo ""
      ;;

    *)
      echo "sha1: $(jq ".stemcells[\"${2}\"].sha1" blessed_versions.json)"
      ;;
  esac
}

determine_stemcell_location() {
  case "${1}" in
     "integration-latest")
      echo "url: $(jq ".stemcells[\"${2}\"].url" blessed_versions.json)"
    ;;
    *.tgz)
      echo "path: file://${1}"
    ;;
    "director-latest")
      echo ""
    ;;
  esac
}

determine_release_location() {
  case "${1}" in

    "integration-latest")
        jq ".releases[] | select(.name == \"${2}\") | .url" blessed_versions.json
      ;;

    "director-latest")
      echo ""
      ;;

    *)
      echo "file://${1}"
      ;;
    esac
}

validate_path() {
  if [ "${1:0:1}" != "/" ]; then
    echo "Stub path ${1} should be absolute." 1>&2
    exit 1
  fi

  if [ ! -e "${1}" ]; then
    echo "File or folder ${1} does not exists" 1>&2
    exit 1
  fi
}

provided_stubs=$(jq -r 'if .stubs then .stubs[] else "" end' "${PATH_TO_CONFIG_FILE}" )

if [ "${provided_stubs}" != "" ]; then
  provided_stubs=(${provided_stubs})
  for var in "${provided_stubs[@]}"
    do
       if [ "${var}" != "" ]; then
        # TODO: is the following the same thing as removing all quotes?
        var="${var%\"}"
        var="${var#\"}"
        validate_path "${var}"
     fi
  done
else
  echo "No stubs provided in ${PATH_TO_CONFIG_FILE}" 1>&2
  exit 1
fi

etcd_release_thing=$(jq -r '.etcd' "${PATH_TO_CONFIG_FILE}" )
etcd_release_thing=${etcd_release_thing:-"integration-latest"}
if [ "${etcd_release_thing}" == "null" ]; then
  etcd_release_thing="integration-latest"
fi

if [ ${etcd_release_thing} != "integration-latest" ] && [ ${etcd_release_thing} != "director-latest" ]; then
  validate_path ${etcd_release_thing}
fi

etcd_version=$(determine_version ${etcd_release_thing} 'etcd')
etcd_release_location=$(determine_release_location ${etcd_release_thing} 'etcd')

cf_release_thing=$(jq -r '.cf' "${PATH_TO_CONFIG_FILE}" )
cf_release_thing=${cf_release_thing:-"integration-latest"}
if [ "${cf_release_thing}" == "null" ]; then
  cf_release_thing="integration-latest"
fi

if [ "${cf_release_thing}" != "integration-latest" ] ; then
  validate_path "${cf_release_thing}"
fi

cf_release_location=""
determine_cf_release_location() {
  if [ "${1}" == "integration-latest" ]; then
    git_commit=$(grep commit "${cf_deployment_dir}/blessed_versions.json" | awk '{gsub(/"/, "", $2); print $2;}')
    dir=$(mktemp -d -t cf-XXXXXX)
    pushd "${dir}" > /dev/null
       git clone https://github.com/cloudfoundry/cf-release.git > /dev/null
       pushd cf-release > /dev/null
         git checkout "${git_commit}" > /dev/null
         ./scripts/update > /dev/null
         cf_release_location="${dir}/cf-release"
       popd > /dev/null
     popd > /dev/null
  else
    cf_release_location="${1}"
  fi
}

cf_version=$(determine_version "${cf_release_thing}" 'cf')
determine_cf_release_location "${cf_release_thing}" 'cf'

stemcell_thing=$(jq -r '.stemcell' "${PATH_TO_CONFIG_FILE}" )
stemcell_thing=${stemcell_thing:-"integration-latest"}
if [ "${stemcell_thing}" = "null" ]; then
  stemcell_thing="integration-latest"
fi

if [ ${stemcell_thing} != "integration-latest" ] && [ ${stemcell_thing} != "director-latest" ]; then echo ${stemcell_thing}
  validate_path ${stemcell_thing}
fi

stemcell_name=$(determine_stemcell_name "${stemcell_thing}" "${infrastructure}")
stemcell_version=$(determine_stemcell_version "${stemcell_thing}" "${infrastructure}")
stemcell_location=$(determine_stemcell_location "${stemcell_thing}" "${infrastructure}")
stemcell_sha1=$(determine_stemcell_sha1 "${stemcell_thing}" "${infrastructure}")

cat > "${DEPLOYMENTS_DIR}/stemcell.yml" <<EOF
---
meta:
  stemcell:
    name: ${stemcell_name}
    version: ${stemcell_version}
    ${stemcell_location}
    ${stemcell_sha1}
EOF

cat > "$DEPLOYMENTS_DIR/releases.yml" <<EOT
---
releases:
  - name: cf
    version: ${cf_version}
    path: ${cf_release_location}
  - name: etcd
    version: ${etcd_version}
    url: ${etcd_release_location}
EOT

if [ "${infrastructure}" = "bosh-lite" ]; then
  infrastructure="warden"
fi

"${cf_deployment_dir}/scripts/generate_deployment_manifest" \
  "${infrastructure}" \
  "${cf_release_location}" \
  "${DEPLOYMENTS_DIR}/releases.yml" \
  "${DEPLOYMENTS_DIR}/stemcell.yml" \
  "${provided_stubs[@]}" > "${DEPLOYMENTS_DIR}/cf.yml"
